C_RATE = 1/20 
RUNTIME_HOURS = 1 / C_RATE # hours
NUM_CELLS = 1
DISCHARGE_CURRENT = -1.2


import pybamm
import numpy as np
from cell import Cell
import params as p

model = pybamm.BaseModel()
geo = {}
i_total = pybamm.Parameter("Input Current / Area") 
#voltage = pybamm.Variable("String Voltage")

parameters = {
    i_total.name: DISCHARGE_CURRENT
}

cells = [Cell(f"Cell {i + 1}", model, geo, parameters) for i in range(NUM_CELLS)]

for i in range(len(cells) - 1):
    model.algebraic[cells[i].iapp] = cells[i + 1].iapp - (cells[i].iapp)

model.algebraic[cells[-1].iapp] = i_total - (cells[-1].iapp) # all same current

#model.algebraic[voltage] = 0
vval = 0

# for cell in cells:
    # model.algebraic[voltage] += (cell.pos.bv_term - cell.neg.bv_term)
    # vval += (p.POS_OCP(cell.pos_csn_ival / cell.pos_csn_maxval) - p.NEG_OCP(cell.neg_csn_ival / cell.neg_csn_maxval))

model.initial_conditions.update({
    #voltage: vval.value,
    **{ cell.iapp: DISCHARGE_CURRENT for cell in cells }
})

# model.variables.update({
    # voltage.name: voltage
# })

param_ob = pybamm.ParameterValues(parameters)
param_ob.process_model(model)
param_ob.process_geometry(geo)

PTS = 30
particles = [] 
for cell in cells:
    particles.append(cell.pos)
    particles.append(cell.neg)

mesh = pybamm.Mesh(geo, 
    { p.domain: pybamm.Uniform1DSubMesh for p in particles },
    { p.r: PTS for p in particles }
)

disc = pybamm.Discretisation(mesh, 
    { p.domain: pybamm.FiniteVolume() for p in particles }
)
disc.process_model(model)

solver = pybamm.CasadiSolver()
time_steps = np.linspace(0, 3600 * RUNTIME_HOURS, 250)
solution = solver.solve(model, time_steps)


#--------------------------------------------------

import consts as c


time_steps = len(solution.t)

voltages = []
for i in range(time_steps):
    voltages.append(0)

for cell in cells:

    # length of entries == # of time steps (600)
    # surface concentration @ each time step
    surf_p = solution[cell.pos.surf_csn_name].entries[-1]
    surf_n = solution[cell.neg.surf_csn_name].entries[-1]

    ## j (electrode current density is constant throughout?)
    j_p = (1 * DISCHARGE_CURRENT) / (cell.pos_elec_thickness * cell.pos_elec_porosity) # solution[positive.j_name].entries[0]
    j_n = (-1 * DISCHARGE_CURRENT) / (cell.neg_elec_thickness * cell.neg_elec_porosity) # solution[negative.j_name].entries[0]

    for i in range(time_steps):
        # get surface concentration @ each time step
        inst_surf_p = surf_p[i]
        scaled_surf_p = inst_surf_p / cell.pos_csn_maxval
        # get current j0 (at i-th timestep)
        j0_p = p.POS_J0(p.ELECTROLYTE_CONC.get_value(), inst_surf_p, cell.pos_csn_maxval)

        # jp is negative. overpotential decreases when pos electrode being lithiated, 
        # so correct signs
        volmer_p = 2 * c.RTF * pybamm.arcsinh(j_p / (2 * j0_p)) # im getting higher overpot.
        
        # default function (given in pybamm basicSPM code -- check Up.py)
        up = p.Up(scaled_surf_p)
        
        # -------------------------------------
        
        inst_surf_n = surf_n[i]
        scaled_surf_n = inst_surf_n / cell.neg_csn_maxval
        j0_n = p.NEG_J0(p.ELECTROLYTE_CONC.get_value(), inst_surf_n, cell.neg_csn_maxval)
        
        # jn is positive. overpotential increases when neg electrode being de-lithiated (discharge),
        # so, correct signs.
        volmer_n = 2 * c.RTF * pybamm.arcsinh(j_n / (2 * j0_n))

        # default function (given in pybamm basicSPM code -- check Un.py)
        un = p.Un(scaled_surf_n)
        print(un)
        
        pos_v = up + volmer_p 
        v = pos_v + volmer_n - un
        voltages[i] += v.value # going from pybamm.Scalar() object to normal integer

#print(voltages)

from matplotlib import pyplot as plt

gah = [
3.8472258724058954,
3.8445232467277344,
3.842742200748823 ,
3.841003050394284 ,
3.839269392889435 ,
3.8375382678070444,
3.8358105096152184,
3.8340872815640332,
3.8323695603407115,
3.8306584691638266,
3.8289549622785106,
3.827259993427502 ,
3.825574465943447 ,
3.8238992377088263,
3.822235056266465 ,
3.820582790741241 ,
3.818943056703744 ,
3.8173165417821258,
3.815703866545599 ,
3.814105607374638 ,
3.812522259047464 ,
3.81095438178416  ,
3.8094023653319407,
3.807866634294439 ,
3.806347563323084 ,
3.80484548952318  ,
3.8033606954962074,
3.801893488193069 ,
3.8004440733457203,
3.7990126652609937,
3.7975994438408645,
3.796204559159942 ,
3.7948281290610075,
3.793470267479362 ,
3.792131039547041 ,
3.790810501494918 ,
3.7895086878229014,
3.788225610337986 ,
3.7869612653695497,
3.7857156274341794,
3.784488658687566 ,
3.7832803024709434,
3.7820904894640246,
3.7809191337143058,
3.7797661456482086,
3.778631403771321 ,
3.7775147977389176,
3.776416193463516 ,
3.775335450912566 ,
3.77427241753748  ,
3.773226945551836 ,
3.7721988505381834,
3.7711879725016977,
3.77019412678953  ,
3.769217126624214 ,
3.7682567762171795,
3.7673128891484517,
3.766385241654513 ,
3.765473640140635 ,
3.7645778674490953,
3.7636977065005905,
3.762832932894477 ,
3.7619833341012474,
3.7611486612422813,
3.7603286958106086,
3.7595231977426096,
3.7587319272765494,
3.757954640484099 ,
3.757191089910099 ,
3.7564410201369265,
3.7557041874259727,
3.754980312502179 ,
3.754269139795384 ,
3.753570393496686 ,
3.752883793769083 ,
3.7522090526713416,
3.75154587356925  ,
3.7508939491232485,
3.7502529606221944,
3.749622575390677 ,
3.7490024454815463,
3.7483922045391984,
3.7477914659076106,
3.7471998185497726,
3.7466168244346805,
3.746042013513501 ,
3.7454748798615105,
3.74491487561971  ,
3.744361405547454 ,
3.7438138200180147,
3.7432714070979096,
3.742733374774821 ,
3.7421988916016433,
3.7416669721879248,
3.741136573612373 ,
3.7406065271659994,
3.740075533538397 ,
3.7395421561980227,
3.73900479585252  ,
3.738461667540852 ,
3.737910883805397 ,
3.737350215784142 ,
3.736777332850656 ,
3.736189656131401 ,
3.7355843756166416,
3.7349584826042563,
3.7343087472783396,
3.7336317460625206,
3.732924062141236 ,
3.732181939318301 ,
3.731401854516425 ,
3.730580296882988 ,
3.729714013897487 ,
3.7288001490499147,
3.7278364001320936,
3.7268212474487394,
3.7257540963301765,
3.7246355537829015,
3.723467402607348 ,
3.7222530773669495,
3.720997271366319 ,
3.7197062896018296,
3.718387702829577 ,
3.717050291504952 ,
3.715703632152078 ,
3.71435816164963  ,
3.7130227893194374,
3.711709285607563 ,
3.710425608649928 ,
3.7091802143357637,
3.7079800528789257,
3.7068305737280998,
3.705735844233937 ,
3.7046983757515024,
3.7037193758986584,
3.702798860219688 ,
3.701935745949935 ,
3.7011281166032393,
3.7003734627070126,
3.699668751633669 ,
3.699010696567229 ,
3.6983958306833222,
3.6978206522438657,
3.697281710123344 ,
3.6967756722817473,
3.696299376750156 ,
3.695849862340596 ,
3.695424390208308 ,
3.695020450149014 ,
3.6946357633526468,
3.6942682750403413,
3.6939161441423978,
3.6935777425765988,
3.6932516167946643,
3.6929364983528554,
3.6926312770612837,
3.692334988895819 ,
3.692046802686691 ,
3.691766007183928 ,
3.691491999303057 ,
3.691224273059101 ,
3.69096240978396  ,
3.6907060687626534,
3.690454979351904 ,
3.6902089330887278,
3.6899677773145934,
3.6897314086391897,
3.6894997676066006,
3.6892728331917124,
3.6890506183225877,
3.6888331649511112,
3.6886205401055068,
3.6884128314605493,
3.688210143497171 ,
3.6880125933442107,
3.687820306937013 ,
3.687633414835822 ,
3.6874520480823847,
3.6872763340494656,
3.68710639181497  ,
3.6869423277682114,
3.686784230418662 ,
3.6866321658342858,
3.686486171581231 ,
3.6863462520737746,
3.6862123716721005,
3.6860844497755516,
3.685962353073765 ,
3.685845890605192 ,
3.6857348049794845,
3.6856287675943267,
3.6855273688471817,
3.685430113555263 ,
3.6853364102670856,
3.6852455669530513,
3.685156779361465 ,
3.685069127178363 ,
3.6849815612134202,
3.684892900058202 ,
3.6848018159565115,
3.6847068316323   ,
3.684606304477411 ,
3.6844984262100895,
3.6843811890218094,
3.6842524155251466,
3.684109653984494 ,
3.6839504117086763,
3.683771658132564 ,
3.6835703506455193,
3.6833430340802282,
3.6830859842301082,
3.6827950832221905,
3.6824658568126893,
3.68209326879102  ,
3.681672110350571 ,
3.6811961029599565,
3.6806586576595306,
3.680052286048115 ,
3.6793686662958316,
3.6785984014115107,
3.677730945650014 ,
3.6767543252576735,
3.6756549827058276,
3.6744174374147565,
3.673024052964629 ,
3.671454579084631 ,
3.66968584137139  ,
3.6676911150509586,
3.6654397242640684,
3.6628961822342463,
3.660019691370612 ,
3.6567629596708002,
3.6530716036742965,
3.6488825152378928,
3.6441231959466824,
3.6387087495104082,
3.63254489272572  ,
3.6255177483599508,
3.6175000305801595,
3.608343853782205 ,
3.5978810087169517,
3.5859162521092096,
3.57223376877461  ,
3.556577263579795 ,
3.5386661290359465,
3.5181794524531993,
3.4947583610229658,
3.468002781355699 ,
3.43747038489463  ,
3.4026762472112537,

]

print(len(gah) == len(voltages))

a = np.array(voltages)
b = np.array(gah)
print(b-a)

plt.plot(solution.t, voltages, label="me")
plt.plot(solution.t, gah, label="correct")
plt.legend()

plt.show()
